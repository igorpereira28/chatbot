import faiss
import numpy as np
from sentence_transformers import SentenceTransformer

# Documentos diretamente na mem√≥ria
documentos = [
    "Receita de bolo de chocolate fofinho: bata ovos, a√ß√∫car e manteiga at√© formar um creme. Adicione farinha de trigo, chocolate em p√≥ e fermento. Asse em forno m√©dio e cubra com brigadeiro feito de leite condensado, chocolate e manteiga.",
    "Panqueca americana: misture farinha, leite, ovos e fermento at√© formar uma massa cremosa. Frite em frigideira antiaderente e sirva com maple syrup e frutas vermelhas.",
    "Arroz de forno com frango: refogue frango desfiado com cebola e alho, misture com arroz cozido, milho, ervilha e molho de tomate. Cubra com queijo e leve ao forno para gratinar.",
    "Salada Caesar: rasgue folhas de alface romana, adicione croutons, queijo parmes√£o e molho Caesar √† base de anchova, alho, lim√£o e mostarda.",
    "Lasanha de berinjela: grelhe fatias de berinjela, intercale com molho de tomate, queijo e leve ao forno at√© gratinar.",
    "Sopa de legumes caseira: cozinhe cenoura, batata, abobrinha e chuchu em caldo temperado com alho, cebola e salsinha. Bata parte da sopa no liquidificador para dar cremosidade.",
    "Risoto de cogumelos: refogue arroz arb√≥reo com cebola, adicione vinho branco e v√° acrescentando caldo aos poucos. Adicione cogumelos refogados e finalize com manteiga e parmes√£o.",
    "Frango ao curry: frite peda√ßos de frango, adicione curry em p√≥, leite de coco e deixe cozinhar at√© engrossar. Sirva com arroz basmati.",
    "Torta de ma√ß√£: forre uma forma com massa folhada, recheie com ma√ß√£s fatiadas, a√ß√∫car e canela. Cubra com mais massa e leve ao forno at√© dourar.",
    "Espaguete ao alho e √≥leo: cozinhe o macarr√£o, frite alho fatiado em azeite e adicione o macarr√£o escorrido. Finalize com pimenta vermelha e salsinha.",
    "Quiche de alho-por√≥: prepare uma massa podre, recheie com alho-por√≥ refogado e uma mistura de creme de leite, ovos e queijo. Asse at√© firmar.",
    "Hamb√∫rguer artesanal: molde carne mo√≠da temperada, grelhe e sirva no p√£o com queijo cheddar, bacon crocante, alface e tomate.",
    "Mousse de maracuj√°: bata no liquidificador leite condensado, creme de leite e suco concentrado de maracuj√°. Leve √† geladeira at√© firmar.",
    "P√£o de queijo mineiro: misture polvilho azedo, leite quente, ovos e queijo meia cura ralado. Modele e asse at√© dourar.",
    "Crepioca: misture ovo com goma de tapioca e queijo, tempere com sal e ervas finas. Cozinhe na frigideira dos dois lados.",
    "Bife acebolado: tempere bifes com sal e alho, frite e reserve. Na mesma panela, refogue cebolas em rodelas. Sirva com arroz e feij√£o tropeiro.",
    "Bolinho de chuva: misture ovos, a√ß√∫car, leite e farinha. Frite colheradas da massa em √≥leo quente e passe no a√ß√∫car com canela.",
    "Caldo verde: cozinhe batatas, bata no liquidificador, volte √† panela com couve fatiada e lingui√ßa calabresa. Deixe ferver e sirva quente.",
    "Chili con carne: refogue carne mo√≠da, adicione feij√£o cozido, tomate, piment√£o e especiarias como cominho e p√°prica. Cozinhe at√© engrossar.",
    "Brigadeiro tradicional: cozinhe leite condensado, chocolate em p√≥ e manteiga at√© desgrudar da panela. Enrole e passe no granulado."
]

# Carregar modelo de embeddings
model = SentenceTransformer("all-MiniLM-L6-v2")

# Gerar embeddings normalizados
embeddings = model.encode(documentos, normalize_embeddings=True).astype('float32')

# Criar √≠ndice FAISS
index = faiss.IndexFlatIP(embeddings.shape[1])
index.add(embeddings)

def buscar(query, top_k=3):
    query_emb = model.encode([query], normalize_embeddings=True).astype('float32')
    distances, indices = index.search(query_emb, top_k)

    resultados = []
    for idx in indices[0]:
        resultados.append(documentos[idx])
    return resultados

if __name__ == "__main__":
    while True:
        consulta = input("üîç Digite sua busca (ou 'sair' para encerrar): ")
        if consulta.lower() == "sair":
            break
        resultados = buscar(consulta)
        print("\nüéØ Resultados mais similares:")
        for i, texto in enumerate(resultados, 1):
            print(f"{i}. {texto}")
        print()
